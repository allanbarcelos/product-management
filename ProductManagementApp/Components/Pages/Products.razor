@page "/products"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using ProductManagementApp.Models
@using ProductManagementApp.Services
@using ProductManagementApp.Locales
@using Microsoft.Extensions.Localization

@inject IProductService ProductService
@inject NavigationManager Navigation
@inject IStringLocalizer<Resources> L

<h1>@L["Products"]</h1>

<div class="d-flex justify-content-between align-items-center mb-3">
    <div class="input-group" style="max-width: 300px;">
        <input type="text" @bind="filter" @bind:event="oninput" placeholder="@L["FilterProducts"]"
            class="form-control" />
        <button class="btn btn-primary" @onclick="ApplyFilter">@L["Apply"]</button>
        @if (hasFilterInQuery)
        {
            <button class="btn btn-warning" @onclick="ClearFilter">@L["Clear"]</button>
        }
    </div>

    <AuthorizeView>
        <Authorized>
            <a href="/add-product" class="btn btn-success">@L["AddProductButton"]</a>
        </Authorized>
    </AuthorizeView>
</div>

@if (products is null)
{
    <p><em>@L["Loading"]</em></p>
}
else if (!products.Any())
{
    <p>@L["NoProductsFound"]</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>@L["Name"]</th>
                <th>@L["Description"]</th>
                <th>@L["Price"]</th>
                <th>@L["CreatedAt"]</th>
                <AuthorizeView>
                    <Authorized>
                        <th>@L["Actions"]</th>
                    </Authorized>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price</td>
                    <td>@product.CreatedAt</td>
                    <AuthorizeView>
                        <Authorized>
                            <td>
                                <a class="btn btn-warning btn-sm me-1" href="/edit-product/@product.Id">@L["Edit"]</a>
                                <button class="btn btn-danger btn-sm"
                                    @onclick="() => DeleteProduct(product.Id)">@L["Delete"]</button>
                            </td>
                        </Authorized>
                    </AuthorizeView>
                </tr>
            }
        </tbody>
    </table>


    <nav>
        <ul class="pagination">
            <li class="page-item @(pageNumber == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(pageNumber - 1)">@L["Previous"]</button>
            </li>

            @for (int i = 1; i <= totalPages; i++)
            {
                var pageIndex = i;
                <li class="page-item @(pageNumber == pageIndex ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(pageIndex)">@pageIndex</button>
                </li>
            }

            <li class="page-item @(pageNumber == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(pageNumber + 1)">@L["Next"]</button>
            </li>
        </ul>
    </nav>
}

@code {
    private List<Product>? products;
    private string filter = string.Empty;
    private int pageNumber = 1;
    private int pageSize = 10;
    private int totalPages = 0;
    private bool hasFilterInQuery = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("page", out var page))
            int.TryParse(page, out pageNumber);

        filter = query.TryGetValue("filter", out var f) ? f.ToString() : null;
        hasFilterInQuery = !string.IsNullOrWhiteSpace(filter);

        if (pageNumber < 1) pageNumber = 1;

        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        try
        {
            (products, totalPages) = await ProductService.GetProductsAsync(filter, pageNumber, pageSize);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading products: {ex.Message}");
            Navigation.NavigateTo("/error");
        }
    }

    private async Task ClearFilter()
    {
        filter = null;
        pageNumber = 1;
        await LoadProductsAsync();
        NavigateToCurrentPage();
    }

    private async Task ApplyFilter()
    {
        pageNumber = 1;
        await LoadProductsAsync();
        NavigateToCurrentPage();
    }

    private async Task DeleteProduct(Guid id)
    {
        await ProductService.DeleteProductAsync(id);
        await LoadProductsAsync();
    }

    private async Task GoToPage(int page)
    {
        if (page < 1) page = 1;
        if (page > totalPages) page = totalPages;

        pageNumber = page;
        await LoadProductsAsync();
        NavigateToCurrentPage();
    }

    private void NavigateToCurrentPage()
    {
        var uri = new Uri(Navigation.Uri);
        var baseUrl = uri.GetLeftPart(UriPartial.Path);

        var queryParams = new Dictionary<string, string?>
        {
            ["page"] = pageNumber.ToString()
        };

        if (!string.IsNullOrWhiteSpace(filter))
            queryParams["filter"] = filter;

        var newUrl = QueryHelpers.AddQueryString(baseUrl, queryParams);
        Navigation.NavigateTo(newUrl, forceLoad: true);
    }
}
